<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从零开始搭建一个后台模板</title>
    <url>/2024/07/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java8 新特性</title>
    <url>/2024/07/01/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<hr>
<h1 id="x20-一、知识体系思维导图"><a href="#x20-一、知识体系思维导图" class="headerlink" title="&#x20;一、知识体系思维导图"></a>&#x20;一、知识体系思维导图</h1><p><img src="https://www.pdai.tech/images/java/java8-overview.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/404.jpg"'></p>
<h1 id="x20-二、函数编程（lambda-表达式）"><a href="#x20-二、函数编程（lambda-表达式）" class="headerlink" title="&#x20;二、函数编程（lambda 表达式）"></a>&#x20;二、函数编程（lambda 表达式）</h1><h2 id="2-1-简介-x20"><a href="#2-1-简介-x20" class="headerlink" title="2.1  简介&#x20;"></a>2.1  简介&#x20;</h2><p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p>
<p><strong>核心思想:</strong> 使用不可变值和函数，函数对一个值进行处理，映射成另一个值。</p>
<p>对核心类库的改进主要包括集合类的API和新引入的流Stream。流使程序员可以站在更高的抽象层次上对集合进行操作。</p>
<h2 id="2-2-lambda-表达式"><a href="#2-2-lambda-表达式" class="headerlink" title="2.2 lambda 表达式"></a>2.2 lambda 表达式</h2><h3 id="2-2-1-为什么使用-lambda-表达式"><a href="#2-2-1-为什么使用-lambda-表达式" class="headerlink" title="2.2.1 为什么使用 lambda 表达式"></a>2.2.1 为什么使用 lambda 表达式</h3><p>使用 Lambda 表达式可以对一个<code>接口的方法</code>进行非常简洁的实现</p>
<h3 id="2-2-2-基本语法"><a href="#2-2-2-基本语法" class="headerlink" title="2.2.2 基本语法"></a>2.2.2 基本语法</h3><pre><code>(parameters) -&gt; expression
或
(parameters) -&gt; &#123; statements; &#125;
</code></pre>
<p><code>()：用来描述参数列表</code><br><code>&#123;&#125;：用来描述方法体 有时可以省略</code><br><code>-&gt;: Lambda运算符 读作goes to</code></p>
<h3 id="2-2-3-语法实例"><a href="#2-2-3-语法实例" class="headerlink" title="2.2.3 语法实例"></a>2.2.3 语法实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无参无返回</span></span><br><span class="line">        LambdaNoneReturnNoneParmeter lambda1=()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello word&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda1.test();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无返回值 单个参数</span></span><br><span class="line">        LambdaNoneReturnSingleParmeter lambda2=(<span class="type">int</span> n)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数是：&quot;</span>+n);</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda2.test(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// -&gt; 2. 参数小括号精简 ,如果参数列表中，参数的数量只有一个 此时小括号可以省略</span></span><br><span class="line">        LambdaNoneReturnSingleParmeter lambda22= n-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;精简小括号后-&gt;参数是：&quot;</span> + n);</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda22.test(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// -&gt; 3. 方法大括号精简 ,如果方法体中只有一条语句，此时大括号可以省略</span></span><br><span class="line">		<span class="comment">// -&gt; 如果方法体中唯一的一条语句是一个返回语句，则省略大括号的同时 也必须省略return</span></span><br><span class="line">        <span class="type">LambdaNoneReturnSingleParmeter</span> <span class="variable">lambda23</span> <span class="operator">=</span> n -&gt; System.out.println(<span class="string">&quot;方法大括号精简后-&gt;参数是：&quot;</span> + n);</span><br><span class="line">        lambda23.test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无返回值 多个参数</span></span><br><span class="line">        LambdaNoneReturnMutipleParmeter lambda3=(<span class="type">int</span> a,<span class="type">int</span> b)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数和是：&quot;</span>+(a+b));</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda3.test(<span class="number">10</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -&gt; 1. 参数类型精简 ,由于在接口的抽象方法中，已经定义了参数的数量类型 所以在Lambda表达式中参数的类型可以省略</span></span><br><span class="line">        LambdaNoneReturnMutipleParmeter lambda33=(a,b)-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;精简 参数类型 后-&gt;参数和是：&quot;</span>+(a+b));</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda33.test(<span class="number">10</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有返回值 无参数</span></span><br><span class="line">        LambdaSingleReturnNoneParmeter lambda4=()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;lambda4：&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ret=lambda4.test();</span><br><span class="line">        System.out.println(<span class="string">&quot;返回值是：&quot;</span>+ret);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有返回值 单个参数</span></span><br><span class="line">        LambdaSingleReturnSingleParmeter lambda5=(<span class="type">int</span> a)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a*<span class="number">2</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ret2= lambda5.test(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;单个参数，lambda5返回值是:&quot;</span>+ret2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有返回值 多个参数</span></span><br><span class="line">        LambdaSingleReturnMutipleParmeter lambda6=(<span class="type">int</span> a,<span class="type">int</span> b)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ret3=lambda6.test(<span class="number">12</span>,<span class="number">14</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;多个参数，lambda6返回值是：&quot;</span>+ret3);</span><br><span class="line">		<span class="comment">// -&gt; 4.错参数精简</span></span><br><span class="line">        LambdaSingleReturnMutipleParmeter lambda61=(a,b)-&gt;a+b;</span><br><span class="line">        System.out.println(<span class="string">&quot;精简后-&gt;多个参数，lambda6返回值是：&quot;</span>+lambda61.test(<span class="number">12</span>,<span class="number">14</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaNoneReturnNoneParmeter</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无返回值有单个参数</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaNoneReturnSingleParmeter</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无返回值 多个参数的接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaNoneReturnMutipleParmeter</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有返回值 无参数接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaSingleReturnNoneParmeter</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有返回值 有单个参数的接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaSingleReturnSingleParmeter</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有返回值 有多个参数的接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaSingleReturnMutipleParmeter</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、Stream-流式编程"><a href="#三、Stream-流式编程" class="headerlink" title="三、Stream 流式编程"></a>三、Stream 流式编程</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><p>流式编程（<a href="https://so.csdn.net/so/search?q=Stream%E6%B5%81&spm=1001.2101.3001.7020">Stream流</a>）是一种在计算机编程中用于处理数据集合的新型方法。</p>
<p><strong>核心思想</strong>是以一种类似于流水线的方式来处理数据，通过一系列的操作来对数据进行筛选、转换、合并和归约，从而实现更简洁、更高效、更可读的代码编写。</p>
<h2 id="3-2-Stream-流的工作图"><a href="#3-2-Stream-流的工作图" class="headerlink" title="3.2 Stream 流的工作图"></a>3.2 Stream 流的工作图</h2><p><img src="https://img-blog.csdnimg.cn/6854b347f08440a881f0241e0fc88b68.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/404.jpg"'></p>
<h2 id="3-3-stream-parallelStream"><a href="#3-3-stream-parallelStream" class="headerlink" title="3.3 stream &amp; parallelStream"></a>3.3 stream &amp; parallelStream</h2><p>每个Stream都有两种模式: 顺序执行和并行执行</p>
<p>下面为性能测试对比：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个范围100万整数流,求能被2整除的数字，toArray()是终点方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[]=IntStream.range(<span class="number">0</span>, <span class="number">1_000_000</span>).filter(p -&gt; p % <span class="number">2</span>==<span class="number">0</span>).toArray(); <span class="comment">// 顺序流</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//和上面功能一样，这里是用并行流来计算</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b[]=IntStream.range(<span class="number">0</span>, <span class="number">1_000_000</span>).parallel().filter(p -&gt; p % <span class="number">2</span>==<span class="number">0</span>).toArray(); <span class="comment">// 并行流</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//我本机的结果是 serial: 0.08s, parallel 0.06s，证明并行流确实比顺序流快</span></span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">&quot;serial: %.2fs, parallel %.2fs%n&quot;</span>, (t1 - t0) * <span class="number">1e-9</span>, (t2 - t1) * <span class="number">1e-9</span>);</span><br></pre></td></tr></table></figure>

<h2 id="x20-3-4-Stream中常用方法"><a href="#x20-3-4-Stream中常用方法" class="headerlink" title="&#x20;3.4 Stream中常用方法"></a>&#x20;3.4 Stream中常用方法</h2><ul>
<li><code>stream()</code>, <code>parallelStream()</code></li>
<li><code>filter()</code></li>
<li><code>findAny()</code> <code>findFirst()</code></li>
<li><code>sort</code></li>
<li><code>forEach</code> void</li>
<li><code>map(), reduce()</code></li>
<li><code>flatMap()</code> - 将多个Stream连接成一个Stream</li>
<li><code>collect(Collectors.toList())</code></li>
<li><code>distinct</code>, <code>limit</code></li>
<li><code>count</code></li>
<li><code>min</code>, <code>max</code>, <code>summaryStatistics</code></li>
</ul>
<h3 id="3-4-1-Filter-Predicate"><a href="#3-4-1-Filter-Predicate" class="headerlink" title="3.4.1 Filter &amp; Predicate"></a>3.4.1 Filter &amp; Predicate</h3><p>过滤(filter)：对Stream流中的数据进行过滤</p>
<p><code>filter</code> 方法是用来对列表进行过滤操作的。它接受一个 <code>Predicate</code> 参数，根据这个参数定义的条件来过滤列表中的元素。</p>
<p>&#x3D;&#x3D;什么是 &#x3D;&#x3D;&#x3D;&#x3D;<code>predicate</code>&#x3D;&#x3D;&#x3D;&#x3D; 参数&#x3D;&#x3D;：在 Java 中，<code>Predicate</code> 是一个函数式接口，用于表示一个断言（即一个布尔类型的函数）。它接受一个输入参数，并返回一个布尔值结果，通常用于对输入参数进行判断或筛选。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">// 声明语言列表的类型为 List&lt;String&gt;</span></span><br><span class="line">            List&lt;String&gt; languages = Arrays.asList(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Scala&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Haskell&quot;</span>, <span class="string">&quot;Lisp&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Languages which start with J :&quot;</span>);</span><br><span class="line">            languages.stream()</span><br><span class="line">                    .filter(language -&gt; language.startsWith(<span class="string">&quot;J&quot;</span>))</span><br><span class="line">                    .forEach(</span><br><span class="line">                            name -&gt; System.out.println(name + <span class="string">&quot; &quot;</span>)</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Languages which start with J :&quot;</span>);</span><br><span class="line">            filter(languages, str -&gt; str.startsWith(<span class="string">&quot;J&quot;</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Languages which end with a :&quot;</span>);</span><br><span class="line">            filter(languages, str -&gt; str.endsWith(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Print all languages:&quot;</span>);</span><br><span class="line">            filter(languages, str -&gt; <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Print no language:&quot;</span>);</span><br><span class="line">            filter(languages, str -&gt; <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Print language whose length is greater than 4:&quot;</span>);</span><br><span class="line">            filter(languages, str -&gt; str.length() &gt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 多个Predicate组合filter</span></span><br><span class="line">            <span class="comment">// 可以用and()、or()和xor()逻辑函数来合并Predicate，</span></span><br><span class="line">            <span class="comment">// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span></span><br><span class="line">            Predicate&lt;String&gt; startsWithJ = (n) -&gt; n.startsWith(<span class="string">&quot;J&quot;</span>);</span><br><span class="line">            Predicate&lt;String&gt; fourLetterLong = (n) -&gt; n.length() == <span class="number">4</span>;</span><br><span class="line">            languages.stream()</span><br><span class="line">                    .filter(startsWithJ.and(fourLetterLong))</span><br><span class="line">                    .forEach((n) -&gt; System.out.print(<span class="string">&quot;nName, which starts with &#x27;J&#x27; and four letter long is -&gt; &quot;</span> + n + <span class="string">&quot;\n&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明泛型方法以确保类型安全</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(List&lt;T&gt; names, Predicate&lt;T&gt; condition)</span> &#123;</span><br><span class="line">            names.stream()</span><br><span class="line">                    .filter(condition)</span><br><span class="line">                    .forEach(name -&gt; System.out.println(name + <span class="string">&quot; &quot;</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-Map-Reduce"><a href="#3-4-2-Map-Reduce" class="headerlink" title="3.4.2 Map&amp;Reduce"></a>3.4.2 Map&amp;Reduce</h3><p><code>Map</code> 和 <code>Reduce</code> 是函数式编程中常用的两种操作，它们通常与集合（如列表、数组）结合使用，用于对集合中的元素进行处理和聚合操作。</p>
<p><code>Map</code> 操作用于将一个集合中的每个元素映射成另一个元素，通常是根据某种规则进行转换。</p>
<p><code>Reduce</code> 操作用于将一个集合中的元素进行聚合操作，最终得到一个单一的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 Integer 列表转换为 Double 列表</span></span><br><span class="line">        costBeforeTax.stream()</span><br><span class="line">                .map(Double::valueOf)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">bill</span> <span class="operator">=</span> costBeforeTax.stream().</span><br><span class="line">                map((cost) -&gt; cost * <span class="number">1.12</span>)</span><br><span class="line">                .reduce((sum, cost) -&gt; sum + cost)</span><br><span class="line">                .get();</span><br><span class="line">        System.out.println(<span class="string">&quot;Total : &quot;</span> + bill);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-3-Collectors"><a href="#3-4-3-Collectors" class="headerlink" title="3.4.3 Collectors"></a>3.4.3 Collectors</h3><p><code>Collectors</code> 是 Java 8 中引入的一个工具类，位于 <code>java.util.stream</code> 包中，它提供了一系列静态方法，用于在流式操作中对元素进行收集和归约。通过 <code>Collectors</code> 可以将流中的元素收集到各种数据结构中，比如集合、映射、字符串或者其他自定义的数据结构。</p>
<p><code>Collectors</code> 提供了丰富的功能，可以简化对流的操作，例如将元素收集到列表、集合、映射等数据结构中，进行分组、分区、聚合运算等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; items = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  基本收集器：</span></span><br><span class="line"><span class="comment">         *      1. toList()：将流中的元素收集到一个列表中。</span></span><br><span class="line"><span class="comment">         *      2. toSet()：将流中的元素收集到一个集合中。</span></span><br><span class="line"><span class="comment">         *      3. toMap()：将流中的元素收集到一个映射中。</span></span><br><span class="line"><span class="comment">         *      4. joining()：连接流中的字符串元素。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// toList</span></span><br><span class="line">        List&lt;String&gt; list = items.stream().collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;List: &quot;</span> + list); <span class="comment">// List: [apple, banana, orange, apple, banana, apple]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// toSet</span></span><br><span class="line">        Set&lt;String&gt; set = items.stream().collect(Collectors.toSet());</span><br><span class="line">        System.out.println(<span class="string">&quot;Set: &quot;</span> + set); <span class="comment">// Set: [banana, orange, apple]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// toMap</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = items.stream().collect(Collectors.toMap(Function.identity(), String::length, (item1, item2) -&gt; item1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Map: &quot;</span> + map); <span class="comment">// Map: &#123;orange=6, banana=6, apple=5&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// joining</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">joined</span> <span class="operator">=</span> items.stream().collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Joined: &quot;</span> + joined); <span class="comment">// Joined: apple, banana, orange, apple, banana, apple</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  聚合运算:</span></span><br><span class="line"><span class="comment">         *      1. counting()：计算流中元素的个数。</span></span><br><span class="line"><span class="comment">         *      2. summarizingInt()、summarizingDouble()、summarizingLong()：对流中数值元素进行摘要统计。快速计算流中元素的最小值、最大值、总和以及平均值</span></span><br><span class="line"><span class="comment">         *      3. summingInt()、summingDouble()、summingLong()：对流中的数值元素求和。</span></span><br><span class="line"><span class="comment">         *      4. averagingInt()、averagingDouble()、averagingLong()：计算流中数值元素的平均值。</span></span><br><span class="line"><span class="comment">         *      5. maxBy()、minBy()：根据提供的比较器找出流中的最大或最小元素。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// counting</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> items.stream().collect(Collectors.counting());</span><br><span class="line">        System.out.println(<span class="string">&quot;Count: &quot;</span> + count); <span class="comment">// Count: 6</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// summarizingInt</span></span><br><span class="line">        System.out.println(<span class="string">&quot;summarizingInt 开始&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 使用 summarizingInt 计算流中元素的最小值、最大值、总和和平均值</span></span><br><span class="line">        <span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .collect(summarizingInt(Integer::intValue));</span><br><span class="line">        System.out.println(<span class="string">&quot;Min: &quot;</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">&quot;Max: &quot;</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum: &quot;</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">&quot;Average: &quot;</span> + stats.getAverage());</span><br><span class="line">        System.out.println(<span class="string">&quot;Count: &quot;</span> + stats.getCount());</span><br><span class="line">        System.out.println(<span class="string">&quot;summarizingInt 结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// summingInt</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalLength</span> <span class="operator">=</span> items.stream().collect(Collectors.summingInt(String::length));</span><br><span class="line">        System.out.println(<span class="string">&quot;Total Length: &quot;</span> + totalLength); <span class="comment">// Total Length: 33</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// averagingInt</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">averageLength</span> <span class="operator">=</span> items.stream().collect(Collectors.averagingInt(String::length));</span><br><span class="line">        System.out.println(<span class="string">&quot;Average Length: &quot;</span> + averageLength); <span class="comment">// Average Length: 5.5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// maxBy</span></span><br><span class="line">        Optional&lt;String&gt; maxItem = items.stream().collect(Collectors.maxBy(Comparator.comparingInt(String::length)));</span><br><span class="line">        maxItem.ifPresent(item -&gt; System.out.println(<span class="string">&quot;Max Item: &quot;</span> + item)); <span class="comment">// Max Item: banana</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  分组与分区：</span></span><br><span class="line"><span class="comment">         *      1. groupingBy()：根据分类函数对流中的元素进行分组。</span></span><br><span class="line"><span class="comment">         *      2. partitioningBy()：根据谓词将流中的元素分为两部分。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// groupingBy</span></span><br><span class="line">        Map&lt;Integer, List&lt;String&gt;&gt; groupedByLength = items.stream().collect(Collectors.groupingBy(String::length));</span><br><span class="line">        System.out.println(<span class="string">&quot;Grouped by Length: &quot;</span> + groupedByLength); <span class="comment">// Grouped by Length: &#123;5=[apple, apple, apple], 6=[banana, orange, banana]&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// partitioningBy</span></span><br><span class="line">        Map&lt;Boolean, List&lt;String&gt;&gt; partitioned = items.stream().collect(Collectors.partitioningBy(s -&gt; s.length() &gt; <span class="number">5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Partitioned: &quot;</span> + partitioned); <span class="comment">// Partitioned: &#123;false=[apple, apple, apple], true=[banana, orange, banana]&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  归约操作</span></span><br><span class="line"><span class="comment">         *      reducing()：通过累加器将流中的元素归约为一个值。</span></span><br><span class="line"><span class="comment">         *      collectingAndThen(): 执行收集操作后对结果进行进一步的转换。</span></span><br><span class="line"><span class="comment">         *      mapping(): 用于在收集过程中对元素进行转换。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// reducing</span></span><br><span class="line">        Optional&lt;String&gt; concatenated = items.stream().collect(Collectors.reducing((s1, s2) -&gt; s1 + <span class="string">&quot;, &quot;</span> + s2));</span><br><span class="line">        concatenated.ifPresent(result -&gt; System.out.println(<span class="string">&quot;Concatenated: &quot;</span> + result)); <span class="comment">// Concatenated: apple, banana, orange, apple, banana, apple</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// collectingAndThen</span></span><br><span class="line">        List&lt;String&gt; unmodifiableList = items.stream().collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));</span><br><span class="line">        System.out.println(<span class="string">&quot;Unmodifiable List: &quot;</span> + unmodifiableList); <span class="comment">// Unmodifiable List: [apple, banana, orange, apple, banana, apple]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// mapping</span></span><br><span class="line">        List&lt;Integer&gt; lengths = items.stream().collect(Collectors.mapping(String::length, Collectors.toList()));</span><br><span class="line">        System.out.println(<span class="string">&quot;Lengths: &quot;</span> + lengths); <span class="comment">// Lengths: [5, 6, 6, 5, 6, 5]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-4-flatMap"><a href="#3-4-4-flatMap" class="headerlink" title="3.4.4 flatMap"></a>3.4.4 flatMap</h3><p>用于处理嵌套的集合或将一个流中的每个元素映射到一个新的流，然后将这些新流合并成一个单一的流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;List&lt;String&gt;&gt; listOfLists = Arrays.asList(</span><br><span class="line">           Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>),</span><br><span class="line">           Arrays.asList(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>),</span><br><span class="line">           Arrays.asList(<span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>)</span><br><span class="line">       );</span><br><span class="line"></span><br><span class="line">       List&lt;String&gt; flattenedList = listOfLists.stream()</span><br><span class="line">                                               .flatMap(List::stream)</span><br><span class="line">                                               .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">       System.out.println(flattenedList); <span class="comment">// 输出: [a, b, c, d, e, f, g, h]</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-5-distinct"><a href="#3-4-5-distinct" class="headerlink" title="3.4.5 distinct"></a>3.4.5 distinct</h3><p>用于去除流中的重复元素，并返回一个新的流。它基于元素的 <code>equals()</code> 方法来判断是否重复。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; distinctNumbers = numbers.stream()</span><br><span class="line">                                               .distinct()</span><br><span class="line">                                               .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(distinctNumbers); <span class="comment">// 输出: [1, 2, 3, 4]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-6-count"><a href="#3-4-6-count" class="headerlink" title="3.4.6 count"></a>3.4.6 count</h3><p><code>count</code> 是一个终端操作，用于计算流中元素的数量。它返回一个 <code>long</code> 类型的结果，表示流中元素的总数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; items = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;blueberry&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> items.stream()</span><br><span class="line">                .filter(item -&gt; item.length() &gt; <span class="number">5</span>)</span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(count); <span class="comment">// 输出: 3</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-7-Match"><a href="#3-4-7-Match" class="headerlink" title="3.4.7 Match"></a>3.4.7 Match</h3><ol>
<li><code>allMatch(Predicate&lt;? super T&gt; predicate)</code>: 检查是否所有元素都匹配给定的谓词。</li>
<li><code>anyMatch(Predicate&lt;? super T&gt; predicate)</code>: 检查是否至少有一个元素匹配给定的谓词。</li>
<li><code>noneMatch(Predicate&lt;? super T&gt; predicate)</code>: 检查是否没有元素匹配给定的谓词。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// allMatch 方法用于检查流中的所有元素是否都满足指定的条件。如果所有元素都满足条件，则返回 true，否则返回 false。</span></span><br><span class="line">        List&lt;Integer&gt; numbers1 = Arrays.asList(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allEven</span> <span class="operator">=</span> numbers1.stream().allMatch(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        System.out.println(allEven); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// anyMatch 方法用于检查流中是否有至少一个元素满足指定的条件。如果有任意一个元素满足条件，则返回 true，否则返回 false。</span></span><br><span class="line">        List&lt;Integer&gt; numbers2 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">anyEven</span> <span class="operator">=</span> numbers2.stream().anyMatch(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        System.out.println(anyEven); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// noneMatch 方法用于检查流中是否没有元素满足指定的条件。如果没有任何元素满足条件，则返回 true，否则返回 false。</span></span><br><span class="line">        List&lt;Integer&gt; numbers3 = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">noneEven</span> <span class="operator">=</span> numbers3.stream().noneMatch(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        System.out.println(noneEven); <span class="comment">// 输出: true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-4-8-peek"><a href="#3-4-8-peek" class="headerlink" title="3.4.8 peek"></a>3.4.8 peek</h3><p><code>peek</code> 一个中间操作，它可以在流的元素上执行某些操作，而不会改变流的内容。该操作通常用于调试、日志记录或观察流中的元素。</p>
<ul>
<li><code>peek</code> 是一个中间操作，它返回与原始流相同类型的新流。</li>
<li><code>peek</code> 操作不会消费流，因此它可以与其他操作链式调用。</li>
<li><code>peek</code> 操作只用于调试、日志记录或观察流中的元素，不应修改元素。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; fruits = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;kiwi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        fruits.stream()</span><br><span class="line">              .peek(fruit -&gt; System.out.println(<span class="string">&quot;Processing: &quot;</span> + fruit))</span><br><span class="line">              .map(String::toUpperCase)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">Processing: apple</span><br><span class="line">APPLE</span><br><span class="line">Processing: banana</span><br><span class="line">BANANA</span><br><span class="line">Processing: orange</span><br><span class="line">ORANGE</span><br><span class="line">Processing: kiwi</span><br><span class="line">KIWI</span><br></pre></td></tr></table></figure>

<h2 id="3-5-内置四大函数接口"><a href="#3-5-内置四大函数接口" class="headerlink" title="3.5 内置四大函数接口"></a>3.5 内置四大函数接口</h2><ol>
<li><strong><code>Predicate&lt;T&gt;</code></strong>: 接受一个输入参数，返回一个布尔值结果。</li>
<li><strong><code>Function&lt;T, R&gt;</code></strong>: 接受一个输入参数，返回一个结果。</li>
<li><strong><code>Supplier&lt;T&gt;</code></strong>: 不接受任何参数，返回一个结果。</li>
<li><strong><code>Consumer&lt;T&gt;</code></strong>: 接受一个输入参数，不返回结果。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Predicate&lt;T&gt; 接口通常用于进行条件判断或过滤操作。它包含一个抽象方法 test，该方法接受一个输入参数并返回一个布尔值。</span></span><br><span class="line">      Predicate&lt;Integer&gt; isEven = n -&gt; n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">      System.out.println(isEven.test(<span class="number">4</span>)); <span class="comment">// 输出: true</span></span><br><span class="line">      System.out.println(isEven.test(<span class="number">5</span>)); <span class="comment">// 输出: false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2. Function&lt;T, R&gt; 接口用于接受一个输入参数并返回一个结果。它包含一个抽象方法 apply。</span></span><br><span class="line">      Function&lt;String, Integer&gt; stringLength = s -&gt; s.length();</span><br><span class="line">      System.out.println(stringLength.apply(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// 输出: 5</span></span><br><span class="line">      System.out.println(stringLength.apply(<span class="string">&quot;Java&quot;</span>)); <span class="comment">// 输出: 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Supplier&lt;T&gt; 接口不接受任何参数，返回一个结果。它包含一个抽象方法 get。</span></span><br><span class="line">      Supplier&lt;String&gt; supplier = () -&gt; <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">      System.out.println(supplier.get()); <span class="comment">// 输出: Hello, World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Consumer&lt;T&gt; 接口接受一个输入参数，不返回结果。它包含一个抽象方法 accept。</span></span><br><span class="line">      Consumer&lt;String&gt; printer = s -&gt; System.out.println(s);</span><br><span class="line">      printer.accept(<span class="string">&quot;Hello, World!&quot;</span>); <span class="comment">// 输出: Hello, World!</span></span><br><span class="line">      printer.accept(<span class="string">&quot;Java&quot;</span>); <span class="comment">// 输出: Java</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java8</tag>
      </tags>
  </entry>
</search>
